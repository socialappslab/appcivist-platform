play {
    # Secret key
    # ~~~~~
    # The secret key is used to secure cryptographics functions.
    # This must be changed for production, but we recommend not changing it in this file.
    # See http://www.playframework.com/documentation/latest/ApplicationSecret for more details.
    crypto {
        secret="tztQB2nX:t;03vn4Cb9SS6n/x44h651BDCrt4sOQACX<<fcf35cFgCvgDhg@iRR4"
        secret=${?APPCIVIST_CRYPTO}
    }
    
    # Evolutions
    # ~~~~~
    evolutions {
        enabled=false
        db {
            default {
                autoApply=false
            }
        }
    }

    # The application languages
    # ~~~~~
    i18n {
        langs = [ "en", "en-US", "es", "es-ES", "it", "it-IT", "de", "de-DE", "fr", "fr-FR" ]
    }
    
    # Modules
    # ~~~~~
    modules {
        enabled += be.objectify.deadbolt.java.DeadboltModule
        enabled += modules.CustomDeadboltHook
        enabled += play.modules.swagger.SwaggerModule
        enabled += schedulers.TaskModule
    }
    
    http.parser.maxMemoryBuffer = 500kB
}

# Database configuration
# ~~~~~
# You can declare as many datasources as you want.
# By convention, the default datasource is named `default`
db {
    default {
        # You can expose this datasource via JNDI if needed (Useful for JPA)
        jndiName=DefaultDS
        
        # Specify a connectionTestQuery. Only do this if upgrading the JDBC-Driver does not help 
        #hikaricp {
        #    connectionTestQuery="SELECT TRUE"
        #}
    
    	# Default driver and URL for in-memory database
        driver=org.h2.Driver
        driver=${?APPCIVIST_DB_DRIVER}
        url="jdbc:h2:mem:play"
        url=${?APPCIVIST_DB_URL}
        # PostgreSQL value examples
        # driver=org.postgresql.Driver 
        # url="jdbc:postgresql://localhost:5432/appcivistcore"
        username=""
        username=${?POSTGRES_USER}
        password=""
        password=${?POSTGRES_PASSWORD}
        
        hikaricp {
            leakDetectionThreshold = 20000
        }
    }
}

# Ebean configuration
# ~~~~~
# You can declare as many Ebean servers as you want.
# By convention, the default server is named `default`
ebean {
    default = ["models.*"]
}

# Logger
# ~~~~~
# You can also configure logback (http://logback.qos.ch/),
# by providing an application-logger.xml file in the conf directory.
logger { 
    # Root logger:
    root=DEBUG
    # Logger used by the framework:
    play=DEBUG
    # Logger provided to your application:
    application=DEBUG
    # AppCivist persisting Logger
    appcivist=true
}

application {
    baseUrl="http://testplatform.appcivist.org/backend"  # used for email invitations and verification codes
    uiUrl="http://testplatform.appcivist.org/#" # no longer works, but used for email invitations
    contributionFiles="http://appcivist.littlemacondo.com/public/contributionsFiles/"
    contributionFilesPath="/public/contributionsFiles/"
    contributionFilesPath=${?APPCIVIST_CONTRIBUTION_FILES_PATH}
    contributionFilesPathIsAbsolute = true
    contributionFilesPathIsAbsolute=${?APPCIVIST_CONTRIBUTION_FILES_PATH_IS_ABSOLUTE}

    # Router
    # ~~~~~
    # Define the Router object to use for this application.
    # This router will be looked up first when the application is starting up,
    # so make sure this is the entry point.
    # Furthermore, it's assumed your route file is named properly.
    # So for an application router like `conf/my.application.Router`,
    # you may need to define a router file `my.application.routes`.
    # Default to Routes in the root package (and `conf/routes`)
    # application.router=my.application.Routes
    
    # Global object class
    # ~~~~~
    # Define the Global object class for this application.
    # Default to Global in the root package.
    # application.global=Global
}

# Additional configuration parameters
# ~~~~~
# Some parameters specific to our project
appcivist {
    logging = false
    db {
        cleanBeforeStarting=false      # clean data in the database before we start
        loadTestUsers=true             # load testing users
        loadTestOrchestration=false     # load the orchestration test examples
        #alpha data initial-data.files = [ "initial-data/alpha/appcivist-pb-sample-basic.yml", "initial-data/alpha/appcivist-pb-sample-voting.yml",  "initial-data/alpha/appcivist-pb-basic-voting-votes.yml" ]
        initial-data.files = [ "initial-data/appcivist-pb-sample-basic.yml", "initial-data/appcivist-pb-sample-voting.yml",  "initial-data/appcivist-pb-basic-voting-votes.yml" ]
    }
    
    dozer {
        mappingFiles = ["dozerMapping.xml"]
    }
    
    services {
        # Replace the following sample non-valid API secrets with correct ones
        mapboxapi {
            # Temporal token for MapBox API
            # Requests limit = 600 req/min
            token = ${?MAPBOX_API_TOKEN}   
        }
        
        imgur {
            clientId = ${?IMGUR_CLIENT_ID}
            clientSecret = ${?IMGUR_CLIENT_SECRET}
        }
        
        aws {
            access.key=${?AWS_ACCESS_KEY}
            secret.key=${?AWS_SECRET_CODE}
            s3.bucket=${?AWS_S3_BUCKET_NAME}
            s3.endpoint=${?AWS_S3_BUCKET_ENDPOINT}
        }
        
        etherpad {
            default {
                serverBaseurl = "http://etherpad.littlemacondo.com"
                serverBaseurl=${?APPCIVIST_ETHERPAD_BASE_URL}
                apiKey = ${?ETHERPAD_API_KEY}
            }
            # You can add other servers by adding a section with their domains
            # If a pad has a base URL that corresponds to this server, we will use its corresponding API key for api calls
            # etherpad.domain.com {
            #   serverBaseUrl = "https://etherpad.domain.com"
            #   apiKey = "XXXXYYYYYZZZ"
            # }
        }
        
        notification {
            default {
                serverBaseUrl = "http://localhost:3025"
                serverBaseurl=${?APPCIVIST_NOTIFICATION_BASE_URL}
                apiKey = ""
                apiKey=${?APPCIVIST_NOTIFICATION_API_KEY}
                useSocialBus = false
            }
        }

        recaptcha {
           secret = "secret code for recaptcha service"
           serverURL = "https://www.google.com/recaptcha/api/siteverify"
        }

        password {
            forgotBaseUrl = "http://localhost:8000/#/v2/user/password/reset/"
            forgotBaseUrl=${?APPCIVIST_FORGOT_PASS_URL}
        }
        
        geocoding {
            service = "nominatim"
        }

        rabbitmq {
            host = "localhost"
            host=${?APPCIVIST_RABBITMQ_HOST}
            port = 5672
            port=${?APPCIVIST_RABBITMQ_PORT}
            user = "guest"
            user=${?RABBITMQ_DEFAULT_USER}
            password = "guest"
            password=${?RABBITMQ_DEFAULT_PASS}
            exchange = "appcivist"
            active = true
            active=${?APPCIVIST_RABBITMQ_ACTIVE}
        }

        peerdoc {
            serverBaseUrl="http://localhost:3000"
            serverBaseUrl=${?APPCIVIST_PEERDOC_URL}
            keyHex="adfb0f4077454862ee2062d3970c9c33"
            keyHex=${?APPCIVIST_PEERDOC_KEY}
        }
    }
    
    # Base URL to use for invitations sent by email
    invitations {
        baseUrl = "http://appcivist.littlemacondo.com/#"
    }
    schedule{
        ballotCreation {
            hour=9,
            minute=5
        }
        milestoneNotification {
            hour=22,
            minute=0
        }
        votingBallot {
            hour=9,
            minute=0
        }
        newsletter {
            hour=16,
            minute=0
        }
    }
    newsletter {
        unsuscribeUrl = ""
    }
}

default {
    language="en-US"
}

api {
    version="beta"
}

swagger { 
    api {
        basepath=""
        info = {
            contact = "Cristhian Parra (cdparra [at] berkeley [dot] edu. Social Apps Lab @ UC Berkeley"
            description = "AppCivist is a software platform for democratic assembly and collective action that lets users organize Assemblies, Campaign and Working Groups as spaces for contribution and decision making"
            title = AppCivist Core API
            #termsOfService : (String) - Terms Of Service | default : empty,
            #license : (String) - Terms Of Service | default : empty,
            #licenseUrl : (String) - Terms Of Service | default : empty
        }
    }
}

play.filters.cors {
  # allow all paths
  pathPrefixes = ["/"]
  # allow all origins (You can specify if you want)
  allowedOrigins = ["http://platform.appcivist.org", "http://testplatform.appcivist.org", "http://pb.appcivist.org", "http://testpb.appcivist.org", "http://appcivist.org", "http://www.appcivist.org", "https://platform.appcivist.org", "https://testplatform.appcivist.org", "https://pb.appcivist.org", "https://testpb.appcivist.org", "https://appcivist.org", "https://www.appcivist.org"]
  allowedHttpMethods = ["OPTIONS", "GET", "POST", "PUT", "DELETE"]
  # allow all headers
  allowedHttpHeaders = null
}

include "play-authenticate/mine.local.conf"
include "play-authenticate/smtp.local.conf"   
include "play-authenticate/local.deadbolt.conf"
