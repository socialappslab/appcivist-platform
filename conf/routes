# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

##################################################################################################################################################################
# Home page
GET       /                                                                      controllers.Application.index()

##################################################################################################################################################################
# CORS Support
OPTIONS   /*path                                                                 controllers.Application.checkPreFlight(path)

##################################################################################################################################################################
# Map static resources from the /public folder to the /assets URL path
GET       /assets/*file                                                          controllers.Assets.versioned(path="/public", file: Asset)
GET       /public/*file                                                          controllers.Assets.versioned(path="/public", file: Asset)


##################################################################################################################################################################
# API Docs
#GET       /api-docs.json                                controllers.ApiHelpController.getResources()
GET       /api/doc                                                               controllers.Application.swaggerDocs()
GET       /api/doc.json                                                          @controllers.ApiHelpController.getResources
GET       /api/doc.json/assembly                                                 @controllers.ApiHelpController.getResource(path="/assembly")
GET       /api/doc.json/campaign                                                 @controllers.ApiHelpController.getResource(path="/campaign")
GET       /api/doc.json/group                                                    @controllers.ApiHelpController.getResource(path="/group")
GET       /api/doc.json/membership                                               @controllers.ApiHelpController.getResource(path="/membership")
GET       /api/doc.json/user                                                     @controllers.ApiHelpController.getResource(path="/user")
GET       /api/doc.json/contribution                                             @controllers.ApiHelpController.getResource(path="/contribution")
GET       /api/doc.json/notification                                             @controllers.ApiHelpController.getResource(path="/notification")

##################################################################################################################################################################
# User and Authentication Management based on play-authenticate
GET       /api/user                                                              controllers.Users.getUsers() 
GET       /api/user/:uid/loggedin                                                controllers.Users.getCurrentUser(uid: Long)
GET       /api/user/:uid/profile                                                 controllers.Users.profile(uid: Long)
POST      /api/user/:uid/profile                                                 controllers.Users.createUserProfile(uid: Long) 
PUT       /api/user/:uid                                                         controllers.Users.updateUser(uid: Long) 
PUT       /api/user/:uid/profile                                                 controllers.Users.updateUserProfile(uid: Long) 
DELETE    /api/user/:uid                                                         controllers.Users.deleteUser(uid: Long) 
DELETE    /api/user/:uid/force                                                   controllers.Users.deleteUserForce(uid: Long) 
POST      /api/user/signup                                                       controllers.Users.doSignup() 
POST      /api/user/login                                                        controllers.Users.doLogin() 
POST      /api/user/logout                                                       controllers.Users.doLogout()
GET       /api/user/verify                                                       controllers.Users.verifyEmail
GET       /api/user/verify/:token                                                controllers.Users.verify(token: String) 
GET       /api/user/:uuid/campaign                                               controllers.Campaigns.campaignsByUserUuid(uuid: java.util.UUID, filter ?="ongoing", assembly:java.util.UUID?=null)
GET       /api/user/:uid/campaign                                                controllers.Campaigns.campaignsByUserId(uid: Long, filter ?="ongoing", assembly:Long?=-1)
GET       /api/user/:uid/fbtoken                                                 controllers.Users.checkFbToken(uid: Long)
POST      /api/user/:uid/fbtoken                                                 controllers.Users.createFbToken(uid: Long)
PUT       /api/user/:uid/fbtoken                                                 controllers.Users.updateFbToken(uid: Long)

##################################################################################################################################################################
# TODO Play Authenticate endpoints to check if we need/validate/integrate better
GET       /api/user/link                                                         controllers.Users.link
GET       /api/user/unverified                                                   controllers.Users.unverified()
GET       /api/user/exists                                                       controllers.Users.exists()
GET       /api/user/login/denied                                                 controllers.Users.onLoginUserNotFound()
GET       /api/user/authenticate/:provider/denied                                controllers.Users.oAuthDenied(provider: String)
GET       /api/user/authenticated                                                controllers.Restricted.index()
GET       /api/user/login/:id                                                    controllers.Restricted.id(id: String)
GET       /api/authenticate/:provider                                            controllers.AuthenticateLocal.authenticate(provider: String)
GET       /api/user/password/reset/:token                                        controllers.Users.resetPassword(token: String)
POST      /api/user/password/reset                                               controllers.Users.doResetPassword
POST      /api/user/password/change                                              controllers.Users.doChangePassword
GET       /api/user/account                                                      controllers.Users.askLink
POST      /api/user/account                                                      controllers.Users.doLink
GET       /api/user/merge                                                        controllers.Users.askMerge
POST      /api/user/merge                                                        controllers.Users.doMerge
POST      /api/user/password/forgot                                              controllers.Users.doForgotPassword
POST      /api/user/password/forgot/change                                       controllers.Users.doChangeForgotPassword
GET       /api/user/logout/redirect                                              controllers.Users.redirectAfterLogout
POST      /api/site/verify                                                       controllers.Secured.verifyRecaptcha(k: String)
GET       /api/user/:uid                                                         controllers.Users.getUser(uid: Long)

##################################################################################################################################################################
# Notifications Service Proxy -OLD
# TODO: integrate a proper message queue manager like rabbitmq
GET       /api/notification/inbox/:sid                                           controllers.Notifications.spaceInbox(sid: Long, page:Integer?=0, pageSize:Integer?=-1)
GET       /api/notification/user/:uuid                                           controllers.Notifications.userInbox(uuid: java.util.UUID)
GET       /api/notification/subscription                                         controllers.Notifications.subscriptions()
DELETE    /api/notification/subscription/:origin/:eventName                      controllers.Notifications.unsubscribe(origin: java.util.UUID, eventName: String)
POST      /api/notification/events/:type                                         controllers.Notifications.createResourceSpaceEvents(type: String)

##################################################################################################################################################################
# Subscriptions and Notifications - NEW
GET       /api/user/:id/notifications                                            controllers.Notifications.getNotificationSignals(id: Long, page:Integer?=0, type: String?=null)
GET       /api/user/:id/notifications/stats                                      controllers.Notifications.getNotificationSignalsStats(id: Long, type: String?=null)
PUT       /api/user/:id/notifications/:nid/read                                  controllers.Notifications.updateNotification(id: Long, nid: Long)
PUT       /api/user/:id/notifications/read                                       controllers.Notifications.updateNotifications(id: Long)
POST      /api/notification/subscription                                         controllers.Notifications.subscribe()
GET       /api/notification/subscription/space/:sid                              controllers.Notifications.findByUserAndResourceSpace(sid: Long)
POST      /api/notification/subscription/space/:sid                              controllers.Notifications.subscribeToResourceSpace(sid: Long)
DELETE    /api/notification/subscription/space/:sid                              controllers.Notifications.unsubscribeToResourceSpace(sid: Long)

##################################################################################################################################################################
# Assemblies API
# API operations to manage Assemblies and entities that related to it 
GET       /api/assembly                                                          controllers.Assemblies.findAssemblies(query ?="", filter ?= "", shortname ?= "")
POST      /api/assembly                                                          controllers.Assemblies.createAssembly(templates ?= "", invitations?="false")
GET       /api/assembly/:id                                                      controllers.Assemblies.findAssembly(id: Long)
PUT       /api/assembly/:id                                                      controllers.Assemblies.updateAssembly(id: Long)
PUT       /api/assembly/:id/resources                                            controllers.Assemblies.createAssemblyResources(id: Long)
PUT       /api/assembly/:id/publish                                              controllers.Assemblies.publish(id: Long)
PUT       /api/assembly/:id/membership                                           controllers.Assemblies.createNewAssemblyMembership(id: Long)
POST      /api/assembly/:id/assembly                                             controllers.Assemblies.createAssemblyInAssembly(id: Long, templates ?= "", invitations?="false")
DELETE    /api/assembly/:id                                                      controllers.Assemblies.deleteAssembly(id: Long)
POST      /api/assembly/:id/membership/:type                                     controllers.Assemblies.createAssemblyMembership(id: Long, type: String)
GET       /api/assembly/:id/membership/:status                                   controllers.Assemblies.listMembershipsWithStatus(id: Long, status: String)
GET       /api/assembly/:aid/user/:uid                                           controllers.Assemblies.isUserMemberOfAssembly(aid: Long, uid: Long)
POST      /api/assembly/:id/invitations                                          controllers.Assemblies.inviteNewMembers(id: Long)
GET       /api/assembly/:aid/linked                                              controllers.Assemblies.findAssembliesLinked(aid: Long)
GET       /api/assembly/:aid/public                                              controllers.Assemblies.getListedLinkedAssemblyProfile(aid: Long) 

# Assembly: contribution templates API
GET       /api/assembly/:aid/contribution/template                               controllers.Assemblies.findContributionTemplatesInAssembly(aid: Long)
POST      /api/assembly/:aid/contribution/template                               controllers.Assemblies.createContributionTemplateInAssembly(aid: Long)
PUT       /api/assembly/:aid/contribution/template/:rid                          controllers.Assemblies.confirmContributionTemplateInAssembly(aid: Long, rid: Long)
DELETE    /api/assembly/:aid/contribution/template/:rid                          controllers.Assemblies.deleteContributionTemplateInAssembly(aid: Long, rid: Long)


# Assembly: configurations in assembly API
GET       /api/assembly/:aid/config                                              controllers.Configs.findConfigs(aid: Long)
GET       /api/assembly/:aid/config/:cid                                         controllers.Configs.findConfig(aid: Long, cid: String)
PUT       /api/assembly/:aid/config/:cid                                         controllers.Configs.updateConfig(aid: Long, cid: String)
POST      /api/assembly/:aid/config                                              controllers.Configs.createConfig(aid: Long)
DELETE    /api/assembly/:aid/config/:cid                                         controllers.Configs.deleteConfig(aid: Long, cid: String)
PUT       /api/user/:aid/config/                                                 controllers.Configs.updateUserConfig(aid: Long)
GET       /api/user/:aid/config/                                                 controllers.Configs.getUserConfig(aid: Long)

# Assembly: upload users
POST      /api/assembly/:aid/member                                                  controllers.Assemblies.uploadAssemblyUsers(aid: Long, send_invitations ?= "false")
POST      /api/assembly/:aid/campaign/:cid/group/:gid/member                         controllers.Assemblies.uploadGroupUsers(aid: Long, cid: Long, gid: Long, send_invitations ?= "false")

##################################################################################################################################################################
# WorkingGroup API
GET       /api/assembly/:aid/group                                               controllers.WorkingGroups.findWorkingGroups(aid: Long)
GET       /api/assembly/:aid/group/:gid                                          controllers.WorkingGroups.findWorkingGroup(aid: Long, gid: Long)
PUT       /api/assembly/:aid/group/:gid                                          controllers.WorkingGroups.updateWorkingGroup(aid: Long, gid: Long)
PUT       /api/assembly/:aid/group/:gid/publish                                  controllers.WorkingGroups.publish(aid: Long, gid: Long)
PUT       /api/assembly/:aid/group/:gid/resources                                controllers.WorkingGroups.createWorkingGroupResource(aid: Long, gid: Long)
PUT       /api/assembly/:aid/group/:gid/membership                               controllers.WorkingGroups.createMembership(aid: Long, gid: Long)
POST      /api/assembly/:aid/group                                               controllers.WorkingGroups.createWorkingGroup(aid: Long, invitations?="false")
GET       /api/assembly/:aid/campaign/:cid/group                                 controllers.WorkingGroups.findWorkingGroupsInCampaign(aid: Long, cid: Long)
POST      /api/assembly/:aid/campaign/:cid/group                                 controllers.WorkingGroups.createWorkingGroupInCampaign(aid: Long, cid: Long, invitations?="false")
DELETE    /api/assembly/:aid/group/:gid                                          controllers.WorkingGroups.deleteWorkingGroup(aid: Long, gid: Long)
POST      /api/assembly/:aid/group/:id/membership/:type                          controllers.WorkingGroups.createGroupMembership(aid: Long, id: Long, type: String)  
GET       /api/assembly/:aid/group/:id/membership                                controllers.WorkingGroups.listMemberships(aid: Long, id: Long)
GET       /api/assembly/:aid/group/:id/membership/:status                        controllers.WorkingGroups.listMembershipsWithStatus(aid: Long, id: Long, status: String)
GET       /api/assembly/:aid/group/:gid/user/:uid                                controllers.WorkingGroups.isUserMemberOfGroup(aid: Long, gid: Long, uid: Long)
GET       /api/assembly/:aid/group/:gid/proposals                                controllers.WorkingGroups.listWorkingGroupProposals(aid: Long, gid: Long) 
GET       /api/assembly/:aid/group/:gid/contributions                            controllers.WorkingGroups.listWorkingGroupContributions(aid: Long, gid: Long) 
POST      /api/assembly/:aid/group/:gid/ballot                                   controllers.WorkingGroups.nextBallotForWorkingGroup(aid: Long, gid: Long)
PUT       /api/assembly/:aid/group/:gid/ballot                                   controllers.WorkingGroups.archiveWorkingGroupsBallot(aid: Long, gid: Long)
POST      /api/assembly/:aid/campaign/:cid/group/:gid/assignments                controllers.WorkingGroups.assignContributionsToGroup(aid: Long, cid: Long, gid: Long)
PUT       /api/assembly/:aid/group/:gid/proposals/:pid/publish                   controllers.WorkingGroups.publishProposal(aid: Long, gid: Long, pid: Long)
GET       /api/assembly/:aid/group/location/:location_name                       controllers.WorkingGroups.findWorkingGroupsByLocationName(aid: Long, location_name: String)

##################################################################################################################################################################
# Invitations and Requests to join a Group and/or and Assembly
# TODO: mark for review and removal if not needed
POST      /api/membership                                                        controllers.Memberships.createMembership() 
# TODO: change and use users numerical id instead of UUID
GET       /api/membership/user/:uid                                              controllers.Memberships.findMembershipByUser(uid: Long, type ?="", by_assembly:Long?= -1)
GET       /api/membership/user/:uid/config                                       controllers.Memberships.userConfigs(uid: Long, type ?="ASSEMBLY")
POST      /api/membership/invitation/:iid/email                                  controllers.Memberships.reSendInvitation(iid: Long)
GET       /api/membership/invitation/:targetType/:targetId/:status               controllers.Memberships.listInvitations(targetType: String, targetId: Long, status: String)
GET       /api/membership/invitation/:token                                      controllers.Memberships.readInvitation(token: java.util.UUID) 
PUT       /api/membership/invitation/:token/:answer                              controllers.Memberships.answerInvitation(token: java.util.UUID, answer: String) 
GET       /api/membership/assembly/:aid/user/:uid                                controllers.Memberships.readUserMembershipInAssembly(aid: Long, uid: Long) 
GET       /api/membership/group/:gid/user/:uid                                   controllers.Memberships.readUserMembershipInGroup(gid: Long, uid: Long)
POST      /api/membership/assembly/:aid                                          controllers.Memberships.createSendInvitationToJoinAssembly(aid: Long) 
POST      /api/membership/group/:gid                                             controllers.Memberships.createSendInvitationToJoinGroup(gid: Long)
POST      /api/membership/assembly/:id/request                                   controllers.Memberships.createMembershipRequest(id: Long)
POST      /api/membership/group/:id/request                                      controllers.Memberships.createMembershipRequest(id: Long)
GET       /api/membership/:id                                                    controllers.Memberships.readMembership(id: Long)
GET       /api/membership/:id/role                                               controllers.Memberships.readMembershipRoles(id: Long)
POST      /api/membership/:id/role                                               controllers.Memberships.addMembershipRole(id: Long)
DELETE    /api/membership/:id/role/:rid                                          controllers.Memberships.deleteMembershipRole(id: Long, rid: Long)
PUT       /api/membership/:id/:status                                            controllers.Memberships.updateMembershipStatus(id: Long, status: String)
DELETE    /api/membership/:id                                                    controllers.Memberships.deleteMembership(id: Long) 
GET       /api/membership/:id/verify/:token                                      controllers.Memberships.verifyMembership(id: Long, token: String) 

##################################################################################################################################################################
# Role API (might be we don't need this) 
GET       /api/role                                                              controllers.Roles.findRoles()
GET       /api/role/:rid                                                         controllers.Roles.findRole(rid: Long)
PUT       /api/role/:rid                                                         controllers.Roles.updateRole(rid: Long)
POST      /api/role                                                              controllers.Roles.createRole()
DELETE    /api/role/:rid                                                         controllers.Roles.deleteRole(rid: Long)


##################################################################################################################################################################
# Campaign Template and Configuration endpoints
GET       /api/campaign/template                                                 controllers.Campaigns.findCampaignTemplates()
GET       /api/assembly/:aid/campaign/:cid/contribution/template                 controllers.Campaigns.findContributionTemplatesInCampaign(aid: Long, cid: Long)
POST      /api/assembly/:aid/campaign/:cid/contribution/template                 controllers.Campaigns.createContributionTemplateInCampaign(aid: Long, cid: Long)
PUT       /api/assembly/:aid/campaign/:cid/contribution/template/:rid            controllers.Campaigns.confirmContributionTemplateInCampaign(aid: Long, cid: Long, rid: Long)
DELETE    /api/assembly/:aid/campaign/:cid/contribution/template/:rid            controllers.Campaigns.deleteContributionTemplateInCampaign(aid: Long, cid: Long, rid: Long)

GET       /api/template/campaign/default                                         controllers.Campaigns.findCampaignTemplatesDefault()
GET       /api/template/group/default                                            controllers.Campaigns.findGroupTemplatesDefault()
GET       /api/template/assembly/default                                         controllers.Campaigns.findAssemblyTemplatesDefault()

##################################################################################################################################################################
# Campaign API
GET       /api/assembly/:aid/campaign                                            controllers.Campaigns.findCampaignsByAssemblyId(aid: Long, filter ?="ongoing")
GET       /api/assembly/:aid/campaign/:cid                                       controllers.Campaigns.findCampaignByAssemblyId(aid: Long, cid: Long)
PUT       /api/assembly/:aid/campaign/:cid                                       controllers.Campaigns.updateCampaign(aid: Long, cid: Long)
PUT       /api/assembly/:aid/campaign/:cid/resources                             controllers.Campaigns.createResources(aid: Long, cid: Long)
PUT       /api/assembly/:aid/campaign/:cid/publish                               controllers.Campaigns.publish(aid: Long, cid: Long)
POST      /api/assembly/:aid/campaign                                            controllers.Campaigns.createCampaignInAssembly(aid: Long, templates?="")
DELETE    /api/assembly/:aid/campaign/:cid                                       controllers.Campaigns.deleteCampaign(aid: Long, cid: Long)
POST      /api/assembly/:aid/campaign/:cid/resource                              controllers.Campaigns.createCampaignResource(aid: Long, cid: Long)
GET       /api/assembly/:aid/campaign/:cid/resources                             controllers.Campaigns.listCampaignResources(aid: Long, cid: Long, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)
GET       /api/assembly/:aid/campaign/:cid/components                            controllers.Campaigns.listCampaignComponents(aid: Long, cid: Long, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)
GET       /api/assembly/:aid/campaign/:cid/themes                                controllers.Campaigns.listCampaignThemes(aid: Long, cid: Long, all: String ?= null, page:Integer?=0, pageSize:Integer?=16, themeType: String?=null, query: String?=null)
GET       /api/assembly/:aid/campaign/:cid/groups                                controllers.Campaigns.listCampaignGroups(aid: Long, cid: Long, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)
GET       /api/assembly/:aid/campaign/:cid/timeline                              controllers.Campaigns.listCampaignTimeline(aid: Long, cid: Long, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)
PUT       /api/assembly/:aid/campaign/:cid/description                           controllers.Campaigns.updateCampaignDescription(aid: Long, cid: Long)
PUT       /api/assembly/:aid/campaign/:cid/group/:gid/description                controllers.Campaigns.updateCampaignGroupDescription(aid: Long, cid: Long, gid: Long)

##################################################################################################################################################################
# CampaignComponent API
GET       /api/assembly/:aid/campaign/:cid/component                             controllers.CampaignComponents.findCampaignComponents(aid: Long, cid:Long)
GET       /api/assembly/:aid/campaign/:cid/component/:cpid                       controllers.CampaignComponents.findCampaignComponent(aid: Long, cid: Long, cpid: Long)
PUT       /api/assembly/:aid/campaign/:cid/component/:cpid                       controllers.CampaignComponents.updateCampaignComponent(aid: Long, cid: Long, cpid: Long)
POST      /api/assembly/:aid/campaign/:cid/component                             controllers.CampaignComponents.createCampaignComponent(aid: Long, cid: Long)
DELETE    /api/assembly/:aid/campaign/:cid/component/:cpid                       controllers.CampaignComponents.deleteCampaignComponent(aid: Long, cid: Long, cpid: Long)

##################################################################################################################################################################
# Contribution API
GET       /api/assembly/:aid/contribution                                        controllers.Contributions.findAssemblyContributions(aid: Long, space?="forum", type?="")
GET       /api/assembly/:aid/campaign/:cid/component/:ciid/contribution          controllers.Contributions.findCampaignComponentContributions(aid: Long, cid: Long, ciid: Long, type?="")
GET       /api/assembly/:aid/campaign/:cid/contribution                          controllers.Contributions.findCampaignContributions(aid: Long, cid: Long, type?="")
GET       /api/assembly/:aid/group/:gid/contribution                             controllers.Contributions.findAssemblyGroupContributions(aid: Long, gid: Long, space?="forum", type?="")
GET       /api/assembly/:aid/contribution/:cid                                   controllers.Contributions.findContribution(aid: Long, cid: Long)
GET       /api/assembly/:aid/contribution/:cid/history                           controllers.Contributions.getContributionsChangeHistory(aid: Long, cid: Long)
POST      /api/contribution/clean/history                                        controllers.Contributions.deleteUnchangedContributionHistories()
POST      /api/contribution/clean/feedback                                       controllers.Contributions.cleanUnarchivedContributionFeedbacks()
POST      /api/contribution/history                                              controllers.Contributions.createHistories()
#GET       /api/assembly/:aid/contribution/:cid/feedback                   controllers.Contributions.readContributionFeedback(aid: Long, cid: Long)
GET       /api/assembly/:aid/campaign/:cid/contribution/:coid/stats              controllers.Contributions.readContributionStats(aid: Long, cid: Long, coid: Long)
GET       /api/assembly/:aid/campaign/:cid/group/:gid/contribution/:coid/stats   controllers.Contributions.readWGContributionStats(aid: Long, cid: Long,gid: Long, coid: Long)
GET       /api/assembly/:aid/campaign/:cid/contribution/:coid/feedback           controllers.Contributions.readContributionFeedbacks(aid: Long, cid: Long, coid: Long)
GET       /api/assembly/:aid/campaign/:cid/contribution/:coid/userfeedback       controllers.Contributions.readContributionFeedbackByUser(aid: Long, cid: Long, coid: Long)
GET       /api/assembly/:aid/campaign/:cid/contribution/:coid/feedback/:fid      controllers.Contributions.readContributionFeedback(aid: Long, cid: Long, coid: Long, fid: Long)
GET       /api/assembly/:aid/contribution/:cid/padid                             controllers.Contributions.findContributionPadId(aid: Long, cid: Long)
GET       /api/assembly/:aid/contribution/:cid/comment                           controllers.Contributions.findContributionComments(aid: Long, cid: Long)
GET       /api/assembly/:aid/contribution/:cid/contributions                     controllers.Contributions.findAssociatedContributions(aid: Long, cid: Long, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)

PUT       /api/space/:sid/contribution/comment/reset                             controllers.Contributions.updateContributionCounters(sid: Long)
#GET		  /api/space/:sid/contribution/word/frequency							 controllers.Contributions.wordsCloud(sid: Long)
#update state of contribution
PUT       /api/assembly/:aid/contribution/:cid/status/:status                    controllers.Contributions.updateContributionStatus(aid: Long, cid: Long, status: String)

GET       /api/assembly/:aid/contribution/:coid/feedback                         controllers.Contributions.readContributionFeedbackNoGroupId(aid: Long, coid: Long, type: String ?= null)
GET       /api/assembly/:aid/group/:gid/contribution/:coid/feedback              controllers.Contributions.readContributionFeedbackPrivate(aid: Long, gid: Long, coid: Long, type: String ?= null)
GET       /api/contributions                                                     controllers.Contributions.all(page?="1", by_uuid?="", by_theme_id?="")

GET       /api/assembly/:aid/campaign/:cid/contribution/:coid/body               controllers.Contributions.findAssemblyContributionPadBody(aid: Long, cid: Long, coid: Long, rev: Long, format: String ?= null)
GET       /api/contribution/:coid/body                                           controllers.Contributions.findContributionPadBody(coid: java.util.UUID, rev: Long, format: String ?= null)

DELETE    /api/assembly/:aid/contribution/:cid/space/:sid                        controllers.Contributions.deleteContributionResourceSpace(aid: Long, cid: Long, sid: Long)
POST      /api/assembly/:aid/contribution/:cid/space/:sid                        controllers.Contributions.assignContributionResourceSpace(aid: Long, cid: Long, sid: Long)
POST      /api/assembly/:aid/group/:gid/contribution                             controllers.Contributions.createAssemblyGroupContribution(aid: Long, gid: Long, space?="forum")
POST      /api/assembly/:aid/contribution/:cid/comment                           controllers.Contributions.createContributionComment(aid: Long, cid: Long)
POST      /api/assembly/:aid/contribution/:cid/attachment                        controllers.Contributions.addAttachmentContribution(aid: Long, cid: Long)
POST      /api/assembly/:aid/forumpost                                           controllers.Contributions.createAssemblyForumPost(aid: Long)
POST      /api/assembly/:aid/group/:gid/forumpost                                controllers.Contributions.createWorkingGroupForumPost(aid: Long, gid: Long)
PUT       /api/assembly/:aid/contribution/:cid                                   controllers.Contributions.updateContribution(aid: Long, cid: Long)
PUT       /api/assembly/:aid/contribution/:cid/moderate                          controllers.Contributions.moderateContribution(aid: Long, cid: Long)
PUT       /api/assembly/:aid/contribution/:cid/softremoval                       controllers.Contributions.softDeleteContribution(aid: Long, cid: Long)
PUT       /api/assembly/:aid/contribution/:cid/recover                           controllers.Contributions.recoverContribution(aid: Long, cid: Long)
PUT       /api/assembly/:aid/campaign/:caid/contribution/:cid/feedback           controllers.Contributions.updateContributionFeedback(aid: Long, caid: Long, cid: Long)
DELETE    /api/assembly/:aid/contribution/:cid                                   controllers.Contributions.forceDeleteContribution(aid: Long, cid: Long)
PUT       /api/assembly/:aid/contributions/popularity                            controllers.Contributions.updateContributionsPopularity(aid: Long)

POST      /api/contribution/pad                                                  controllers.Contributions.createContributionPad(aid?="", cid?="")
PUT       /api/contribution/pad                                                  controllers.Contributions.confirmContributionPad(rid: Long)

POST      /api/contribution/:uuid/themes                                         controllers.Contributions.addThemeToContribution(uuid: java.util.UUID)
POST      /api/contribution/:uuid/authors                                        controllers.Contributions.addAuthorToContribution(uuid: java.util.UUID)
DELETE    /api/contribution/:uuid/themes/:tid                                    controllers.Contributions.deleteThemeFromContribution(uuid: java.util.UUID, tid: Long)
DELETE    /api/contribution/:uuid/authors/:auuid                                 controllers.Contributions.deleteAuthorFromContribution(uuid: java.util.UUID, auuid: java.util.UUID)

#import/export contributions, type=IDEA
#POST      /api/assembly/:aid/campaign/:cid/contribution/import            controllers.Contributions.importContributionsOld(aid: Long, cid: Long)
POST      /api/assembly/:aid/campaign/:cid/contribution/import                   controllers.Contributions.importContributions(aid: Long, cid: Long, type?="", createThemes: Boolean ?=false)
GET       /api/assembly/:aid/campaign/:cid/contribution/export                   controllers.Contributions.exportContributions(aid: Long, cid: Long)
POST      /api/assembly/:aid/campaign/:cid/contribution/:coid/document           controllers.Contributions.createPad(aid: Long, cid: Long, coid: Long, typeDocument?="etherpad", contributionTemplateId: java.lang.Long ?=null, resourceTemplateId: java.lang.Long ?=null)

##################################################################################################################################################################
# Location endpoints
GET       /api/location/:query                                                   controllers.Locations.findLocations(query: String)
GET       /api/location/geojson/:query                                           controllers.Locations.getGeojson(query: String)
GET       /api/location/update/geojson                                           controllers.Locations.updateLocationGeojson()

##################################################################################################################################################################
# Utilities endpoints
GET       /api/file/upload-form                                                  controllers.Files.index()
GET       /api/files                                                             controllers.Files.list()
POST      /api/upload                                                            controllers.Files.upload()
POST      /api/upload/data                                                       controllers.Files.uploadData()
POST      /api/log                                                               controllers.Application.logActivity()
POST      /api/log/public                                                        controllers.Application.logActivityPublic()
POST      /api/log/front                                                         controllers.Application.logErrorFrontEnd()

##################################################################################################################################################################
# Resource Space Common API
# Operations that add or delete entities from the resource spaces that are connected to the main entities in AppCivist
GET       /api/space/:sid                                                        controllers.Spaces.getSpace(sid: Long)
GET       /api/space/:sid/organization                                           controllers.Assemblies.findOrganizationsInSpace(sid: Long)
PUT       /api/space/:sid/organization                                           controllers.Assemblies.updateOrganizationsInSpace(sid: Long)
DELETE    /api/space/:sid/organization/:id                                       controllers.Assemblies.deleteOrganizationFromSpace(sid: Long, id: Long)
GET       /api/space/:sid/contribution/words/frecuency                           controllers.Contributions.wordsFrecuency(sid:Long)
GET       /api/space/:sid/contribution/search                                    controllers.Contributions.searchContributionsByText(sid: Long, by_text?="")
GET       /api/space/:sid/words                                                  controllers.Contributions.wordsFrecuencyByType(sid: Long, type?="")
GET       /api/space/:sid/contribution/pinned                                    controllers.Contributions.findResourceSpacePinnedContributions(sid: Long, type?="")
POST      /api/space/:sid/space/:new_sid                                         controllers.Contributions.assignResourceSpaceToResourceSpace(sid: Long, new_sid: Long)
GET       /api/space/:uuid/public                                                controllers.Spaces.getPublicSpace(uuid: java.util.UUID)
GET       /api/space/:sid/field                                                  controllers.Spaces.findSpaceFields(sid: Long)
GET       /api/space/:sid/commentcount                                           controllers.Spaces.getCommentCount(sid: Long)
POST      /api/space/:sid/field                                                  controllers.Spaces.createSpaceFields(sid: Long)
PUT       /api/space/:sid/field/:cfid                                            controllers.Spaces.updateSpaceFields(sid: Long, cfid: Long)
DELETE    /api/space/:sid/field/:cfid                                            controllers.Spaces.deleteSpaceFields(sid: Long, cfid: Long)
GET       /api/space/:sid/fieldvalue                                             controllers.Spaces.findSpaceFieldsValue(sid: Long)
GET       /api/space/:uuid/fieldvalue/public                                     controllers.Spaces.findSpaceFieldsValuePublic(uuid: java.util.UUID)
POST      /api/space/:sid/fieldvalue                                             controllers.Spaces.createSpaceFieldsValue(sid: Long)
POST      /api/space/:sid/fieldvalues                                            controllers.Spaces.createSpaceFieldValues(sid: Long)
PUT       /api/space/:sid/fieldvalue/:cfid                                       controllers.Spaces.updateSpaceFieldsValue(sid: Long, cfid: Long)
PUT       /api/space/:sid/fieldvalues                                            controllers.Spaces.updateSpaceFieldValues(sid: Long)
DELETE    /api/space/:sid/fieldvalue/:cfid                                       controllers.Spaces.deleteSpaceFieldsValue(sid: Long, cfid: Long)
GET       /api/space/:sid/field/:fid/value/:etype                                controllers.Spaces.searchCustomFieldsByValue(sid: Long,fid: Long, etype: String, value?="")

POST      /api/space/:sid/ballot                                                 controllers.Spaces.createSpaceBallot(sid: Long)
POST      /api/space/:sid/config                                                 controllers.Configs.createSpaceConfig(sid: Long)
POST      /api/space/:sid/resource                                               controllers.Spaces.addSpaceResources(sid: Long)
POST      /api/space/:sid/contribution                                           controllers.Contributions.createContributionInResourceSpaceWithId(sid: Long)
GET       /api/space/:sid/insights/themes                                        controllers.Spaces.exportSpaceThemeStats(sid: Long, type?="")

GET       /api/space/:sid/ballot/:bid                                            controllers.Spaces.findSpaceBallotById(sid: Long, bid: Long)
GET       /api/space/:sid/ballot                                                 controllers.Spaces.findSpaceBallot(sid: Long, status?="", starts_at?="" , ends_at?="")
PUT       /api/space/:sid/ballot                                                 controllers.Spaces.updateSpaceBallot(sid: Long)
GET       /api/space/:sid/config/:uuid                                           controllers.Configs.findSpaceConfigById(sid: Long, uuid: java.util.UUID)
GET       /api/space/:sid/config                                                 controllers.Configs.findSpaceConfigs(sid: Long)
PUT       /api/space/:sid/config/:uuid                                           controllers.Spaces.updateSpaceCampaignConfig(sid: Long, uuid: java.util.UUID)
PUT       /api/space/:sid/config                                                 controllers.Configs.updateSpaceConfig(sid: Long)
GET       /api/space/:sid/contribution/:cid                                      controllers.Contributions.findResourceSpaceContributionById(sid: Long, cid: Long, format?="JSON", includeExtendedText?="false", extendedTextFormat?="")
GET       /api/space/:sid/contribution                                           controllers.Contributions.findResourceSpaceContributions(sid: Long, type?="", by_text?="", groups: java.util.List[Integer] ?=null, themes: java.util.List[Integer] ?=null, all: String ?= null, by_author:Integer?= null, page:Integer?=0, pageSize:Integer?=null, sorting?="", random: String ?= null, status: String?="", format?="JSON", includeExtendedText?="false", extendedTextFormat?="", collectionFileFormat?="CSV", selectedContributions: java.util.List[String])
GET       /api/space/:sid/resource/:rid                                          controllers.Campaigns.listSpaceResourcesById(sid: Long, rid: Long)
GET       /api/space/:sid/resource                                               controllers.Campaigns.listSpaceResources(sid: Long)
GET       /api/space/:sid/component/:cid                                         controllers.Spaces.listSpaceComponentById(sid: Long, cid: Long)
GET       /api/space/:sid/component                                              controllers.Spaces.listSpaceComponent(sid: Long)
GET       /api/space/:sid/milestone/:mid                                         controllers.Spaces.listSpaceMilestoneById(sid: Long, mid: Long)
GET       /api/space/:sid/milestone                                              controllers.Spaces.listSpaceMilestone(sid: Long)
GET       /api/space/:sid/assembly/:aid                                          controllers.Spaces.listSpaceAssemblyById(sid: Long, aid: Long)
GET       /api/space/:sid/assembly                                               controllers.Spaces.listSpaceAssembly(sid: Long)
GET       /api/space/:sid/campaign/:cid                                          controllers.Spaces.listSpaceCampaignById(sid: Long, cid: Long)
GET       /api/space/:sid/campaign                                               controllers.Spaces.listSpaceCampaign(sid: Long)
GET       /api/space/:sid/theme/:tid                                             controllers.Spaces.listSpaceThemeById(sid: Long, tid: Long)
GET       /api/space/:sid/theme                                                  controllers.Spaces.listSpaceTheme(sid: Long)
GET       /api/space/:sid/group/:gid                                             controllers.Spaces.listSpaceGroupById(sid: Long, gid: Long)
GET       /api/space/:sid/group                                                  controllers.Spaces.listSpaceGroup(sid: Long, is_topic?="true")

PUT       /api/space/:sid/component/:cid                                         controllers.Spaces.updateSpaceCampaignComponent(sid: Long, cid: Long)
PUT       /api/space/:sid/milestone/:mid                                         controllers.Spaces.updateSpaceComponentMilestone(sid: Long, mid: Long)
PUT       /api/space/:sid/contribution/:cid                                      controllers.Spaces.updateSpaceContribution(sid: Long, cid: Long)
PUT       /api/space/:sid/assembly/:aid                                          controllers.Spaces.updateSpaceAssembly(sid: Long, aid: Long)
PUT       /api/space/:sid/group/:gid                                             controllers.Spaces.updateSpaceGroup(sid: Long, gid: Long)
PUT       /api/space/:sid/campaign/:cid                                          controllers.Spaces.updateSpaceCampaign(sid: Long, cid: Long)
PUT       /api/space/:sid/resource/:rid                                          controllers.Spaces.updateSpaceResource(sid: Long, rid: Long)
PUT       /api/space/:sid/theme/:tid                                             controllers.Spaces.updateSpaceTheme(sid: Long, tid: Long)

DELETE    /api/space/:sid/config/:uuid                                           controllers.Spaces.deleteSpaceConfig(sid: Long, uuid: java.util.UUID)
DELETE    /api/space/:sid/ballot/:bid                                            controllers.Spaces.deleteSpaceBallot(sid: Long, bid: Long)
DELETE    /api/space/:sid/component/:cid                                         controllers.Spaces.deleteSpaceComponent(sid: Long, cid: Long)
DELETE    /api/space/:sid/milestone/:mid                                         controllers.Spaces.deleteSpaceMilestone(sid: Long, mid: Long)
DELETE    /api/space/:sid/contribution/:cid                                      controllers.Spaces.deleteSpaceContribution(sid: Long, cid: Long)
DELETE    /api/space/:sid/assembly/:aid                                          controllers.Spaces.deleteSpaceAssembly(sid: Long, aid: Long)
DELETE    /api/space/:sid/group/:gid                                             controllers.Spaces.deleteSpaceGroup(sid: Long, gid: Long)
DELETE    /api/space/:sid/campaign/:cid                                          controllers.Spaces.deleteSpaceCampaign(sid: Long, cid: Long)
DELETE    /api/space/:sid/resource/:rid                                          controllers.Spaces.deleteSpaceResource(sid: Long, rid: Long)
DELETE    /api/space/:sid/theme/:tid                                             controllers.Spaces.deleteSpaceTheme(sid: Long, tid: Long)

##################################################################################################################################################################
# Public Common API
# Endpoints that are available to Non-Members
GET       /api/public/assembly/:uuid                                             controllers.Assemblies.findAssemblyByUUID(uuid: java.util.UUID)
GET       /api/public/assembly/:uuid/profile                                     controllers.Assemblies.getAssemblyProfile(uuid: java.util.UUID)
PUT       /api/public/assembly/:uuid/profile                                     controllers.Assemblies.updateProfile(uuid: java.util.UUID)
GET       /api/public/assembly/:uuid/theme                                       controllers.Assemblies.getAssemblyThemes(uuid: java.util.UUID)
GET       /api/public/assembly/:uuid/campaign                                    controllers.Campaigns.findCampaignsByAssemblyUUID(uuid: java.util.UUID, filter?="ongoing")
GET       /api/public/assembly/name/:shortname                                   controllers.Assemblies.findAssemblyByShortname(shortname: String)
GET       /api/public/group/:uuid                                                controllers.WorkingGroups.findWorkingGroupByUUID(uuid: java.util.UUID)
GET       /api/public/contribution/:uuid                                         controllers.Contributions.findContributionByUUID(uuid: java.util.UUID)
GET       /api/public/contribution/:uuid/history                                 controllers.Contributions.findContributionHistoryByUUID(uuid: java.util.UUID)
GET       /api/public/contribution/:couuid/feedback                              controllers.Contributions.readContributionFeedbackPublic(couuid: String, type: String ?= null)
GET       /api/public/campaign/:uuid                                             controllers.Campaigns.findCampaignByUUID(uuid: java.util.UUID)
GET       /api/public/campaign/:uuid/resources                                   controllers.Campaigns.listPublicCampaignResources(uuid: java.util.UUID, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)
GET       /api/public/campaign/:uuid/components                                  controllers.Campaigns.listPublicCampaignComponents(uuid: java.util.UUID, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)
GET       /api/public/campaign/:uuid/themes                                      controllers.Campaigns.listPublicCampaignThemes(uuid: java.util.UUID, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)
GET       /api/public/campaign/:uuid/groups                                      controllers.Campaigns.listPublicCampaignGroups(uuid: java.util.UUID, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)
GET       /api/public/campaign/:uuid/timeline                                    controllers.Campaigns.listPublicCampaignTimeline(uuid: java.util.UUID, all: String ?= null, page:Integer?=0, pageSize:Integer?=16)
GET       /api/public/campaign/:uuid/brief                                       controllers.Campaigns.getCampaignBrief(uuid: java.util.UUID)
GET       /api/public/ballot/:uuid/campaign                                      controllers.Campaigns.findCampaignsByBallot(uuid: java.util.UUID)
GET       /api/public/space/:uuid                                                controllers.Spaces.getPublicSpace(uuid: java.util.UUID)
GET       /api/public/space/:uuid/contribution/pinned                            controllers.Contributions.findResourceSpacePinnedContributionsByUUID(uuid: java.util.UUID, type?="")
GET       /api/public/space/:uuid/organization                                   controllers.Assemblies.findOrganizationsInSpaceByUUID(uuid: java.util.UUID)
GET       /api/public/space/:uuid/commentcount                                   controllers.Spaces.getCommentCountPublic(uuid: java.util.UUID)
POST      /api/public/space/:uuid/resource                                       controllers.Spaces.addSpaceResourcesbyUuid(uuid: java.util.UUID)
GET       /api/public/space/:uuid/analytics                                      controllers.Spaces.getAnalytics(uuid: java.util.UUID, includeThemes?="")

# Public custom field endpoints
GET       /api/public/space/:uuid/field                                          controllers.Spaces.findSpaceFieldsByUUID(uuid: java.util.UUID)
GET       /api/public/space/:uuid/fieldvalue                                     controllers.Spaces.findSpaceFieldsValuePublic(uuid: java.util.UUID)
POST      /api/public/space/:uuid/fieldvalue                                     controllers.Spaces.createSpaceFieldsValueByUUID(uuid: java.util.UUID)
POST      /api/public/space/:uuid/fieldvalues                                    controllers.Spaces.createSpaceFieldValuesByUUID(uuid: java.util.UUID)
GET       /api/public/space/:uuid/field/:fid/value/:etype                        controllers.Spaces.searchCustomFieldsByValueByUUID(uuid: java.util.UUID,fid: Long, etype: String, value?="")

# Support for non-member author contributions
POST      /api/public/assembly/:uuid/contribution                                controllers.Contributions.createAnonymousContributionOnAssembly(uuid: String)
POST      /api/public/campaign/:uuid/contribution                                controllers.Contributions.createAnonymousContributionOnCampaign(uuid: String)
PUT       /api/public/campaign/:cuuid/contribution/:uuid/feedback                controllers.Contributions.updateContributionFeedbackNonMemberAuthor(cuuid: java.util.UUID, uuid: java.util.UUID)
POST      /api/public/group/:uuid/contribution                                   controllers.Contributions.createAnonymousContributionOnWorkingGroup(uuid: String)
POST      /api/public/contribution/:uuid/contribution                            controllers.Contributions.createAnonymousContribution(uuid: String)
POST      /api/public/space/:uuid/contribution                                   controllers.Contributions.createAnonymousContributionInSpacePublic(uuid: String)

GET       /api/public/space/:uuid/contribution                                   controllers.Contributions.findResourceSpaceContributionsByUUID(uuid: java.util.UUID, type?="", by_text?="", groups: java.util.List[Integer] ?=null, themes: java.util.List[Integer] ?=null, all: String ?= null, page:Integer?=0, pageSize:Integer?=16, sorting?="", random: String ?= null, status: String ?= "")
GET       /api/public/space/:uuid/config                                         controllers.Configs.findSpaceConfigsPublic(uuid: java.util.UUID)
GET       /api/public/space/:uuid/ballot                                         controllers.Spaces.findSpaceBallotPublic(uuid: java.util.UUID, status?="", starts_at?="" , ends_at?="")
GET       /api/public/space/:uuid/resource                                       controllers.Campaigns.listSpaceResourcesbyUuid(uuid: java.util.UUID)
GET       /api/public/space/:uuid/component                                      controllers.Spaces.findSpaceComponentPublic(uuid: java.util.UUID)
GET       /api/public/space/:uuid/milestone                                      controllers.Spaces.findSpaceMilestonePublic(uuid: java.util.UUID)
GET       /api/public/space/:uuid/assembly                                       controllers.Spaces.findSpaceAssemblyPublic(uuid: java.util.UUID)
GET       /api/public/space/:uuid/campaign                                       controllers.Spaces.findSpaceCampaignPublic(uuid: java.util.UUID)
GET       /api/public/space/:uuid/theme                                          controllers.Spaces.findSpaceThemePublic(uuid: java.util.UUID)
GET       /api/public/space/:uuid/group                                          controllers.Spaces.findSpaceGroupPublic(uuid: java.util.UUID)
DELETE    /api/public/space/:suuid/contribution/:cuuid                           controllers.Spaces.deleteSpaceContributionPublic(suuid: java.util.UUID, cuuid: java.util.UUID)
PUT       /api/public/space/:suuid/contribution/:cuuid                           controllers.Spaces.updateSpaceContributionPublic(suuid: java.util.UUID, cuuid: java.util.UUID)

GET       /api/space/:sid/authors                                                controllers.Spaces.exportNonMemberAuthors(sid: Long, format?="")

# ToDo: Public Endoints to review
GET       /api/public/assembly/listed                                            controllers.Assemblies.findAssembliesPublic(query ?="", filter ?= "")
GET       /api/public/assembly/:aid/group/:gid                                   controllers.WorkingGroups.getListedWorkingGroupProfile(aid: Long, gid: Long)

# Update Language
POST      /api/contribution/language                                             controllers.Contributions.updateAllContributionLanguages()
